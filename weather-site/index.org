#+TITLE: Clima en Detroit - Registro Automatizado
#+AUTHOR: Andres Alban y Andy Cabrera
#+DATE: 2025-08-04
#+OPTIONS: toc:nil num:nil
#+HTML_HEAD: <link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />

* Descripción del Proyecto
Este proyecto tiene como finalidad simular un sistema de monitoreo ambiental que permita recolectar, registrar y presentar información climática de manera automatizada y continua. A través del uso de herramientas de programación, automatización en sistemas Linux y tecnologías web ligeras, se busca crear una solución sencilla, funcional y documentada que represente una aplicación real del desarrollo de software para la captura y análisis de datos externos.

Este proyecto tiene como objetivo realizar un registro automatizado de datos climatológicos en la ciudad de *Detroit* utilizando el API gratuito de OpenWeather.

Se desarrolló un script en Python que consulta los datos actuales del clima y los almacena en un archivo CSV. La recolección se realiza periódicamente cada 15 minutos utilizando *crontab* en un entorno Linux/WSL.

#+BEGIN_CENTER
*Registro Climatológico Automatizado para la Ciudad de Detroit*
#+END_CENTER

* 1. Formulación del Problema

Se desea realizar un registro climatológico de la ciudad de *Detroit* utilizando el API de OpenWeather. El sistema debe capturar datos cada 15 minutos y almacenarlos en un archivo CSV, de forma acumulativa.

#+BEGIN_QUOTE
Aquí irá una explicación detallada del propósito del script y los datos que se esperan capturar (temperatura, humedad, lluvia, etc.).
#+END_QUOTE

* 2. Estructura del Proyecto

#+BEGIN_SRC shell
tree
.
├── clima-detroit-hoy.csv
├── get-weather.sh
├── main.py
├── output.log
├── weather-site/
│   ├── index.org
│   └── public/
│       └── images/
└── images/
    ├── temperature.png
    └── humidity.png
#+END_SRC

#+BEGIN_QUOTE
###Aquí puede explicar cómo se organizó la estructura de carpetas y por qué.###
#+END_QUOTE

* 3. Descripción del Código

** 3.1 Lectura del API

#+BEGIN_SRC python
### Aquí irá el código de conexión al API y lectura del JSON ##
#+END_SRC

** 3.2 Conversión de JSON a diccionario

#+BEGIN_SRC python
### Aquí el bloque donde se transforma el JSON en un diccionario o dataframe ###
#+END_SRC

** 3.3 Guardar datos en CSV

#+BEGIN_SRC python
### Aquí va el código para guardar en clima-detroit-hoy.csv sin borrar datos anteriores ###
#+END_SRC

* 4. Script ejecutable `.sh`

#+BEGIN_SRC sh
#!/usr/bin/sh
source /home/<user>/miniforge3/etc/profile.d/conda.sh
eval "$(conda shell.bash hook)"
conda activate iccd332
python main.py
#+END_SRC

* 5. Configuración de `crontab`

#+BEGIN_SRC sh
*/15 * * * * cd /home/<user>/CityWeather && ./get-weather.sh >> output.log 2>&1
#+END_SRC

#+BEGIN_QUOTE
### Aquí irá una explicación de cómo se configuró el crontab y qué hace el redireccionamiento de salida. ###
#+END_QUOTE

* 6. Presentación de Resultados

** 6.1 Muestra aleatoria de datos

#+BEGIN_SRC python
import pandas as pd
df = pd.read_csv("clima-detroit-hoy.csv")
df.sample(10) 

### por ejemplo 
#+END_SRC

** 6.2 Gráfica: Temperatura vs Tiempo

#+CAPTION: Temperatura vs Tiempo
[[./public/images/temperature.png]]

** 6.3 Gráfica: Humedad vs Tiempo

#+CAPTION: Humedad vs Tiempo
[[./public/images/humidity.png]]

** 6.4 Otra gráfica de interés (opcional)

#+BEGIN_QUOTE
### Aquí puedes insertar alguna gráfica adicional como velocidad del viento, presión atmosférica, etc. ###
#+END_QUOTE

* 7. Conclusiones

El desarrollo de este proyecto permitió aplicar diversos conocimientos de programación, automatización y publicación web en un entorno real y práctico. A continuación, se detallan algunas conclusiones relevantes:

1. **Integración de servicios externos:** Se comprendió el uso de APIs y su interacción mediante scripts automatizados.
2. **Automatización con crontab:** Fue posible establecer un sistema de recolección de datos autónomo en Linux.
3. **Procesamiento de datos climáticos:** Se manejaron estructuras JSON y su conversión a CSV para análisis posterior.
4. **Uso de Emacs y org-mode:** Se logró crear un sitio web estático con herramientas ligeras, sin depender de CMS pesados.
5. **Documentación y respaldo:** El uso de GitHub permitió llevar un control de versiones y asegurar trazabilidad.


* 8. Referencias

- [[https://openweathermap.org/api][Documentación oficial OpenWeather]]
- [[https://realpython.com/python-requests/][Uso de requests en Python]]
- [[https://orgmode.org/][Org Mode (GNU Emacs)]]
- [[https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/][Tutorial de publicación web con Org Mode]]
- [[https://emacs.stackexchange.com/questions/28715/get-pandas-data-frame-as-a-table-in-org-babel][Mostrar DataFrame en org-babel]]
- [[https://github.com/LeninGF/EPN-Lectures/tree/main/iccd332ArqComp-2024-B/Proyectos/CityWeather][Repositorio de ejemplos del curso]]

* Créditos y Licencia

Desarrollado por los futuros ingenieros Andres Alban y Andy Cabrera del curso de Arquitectura de computadoras en la facultad de Sistemas de la Escula politecnica nacional 




